<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-07-26T15:07:38+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ngozi Nwogwugwu</title><subtitle>nwogwugwu.eth</subtitle><entry><title type="html">Notes: Logs</title><link href="http://localhost:4000/programming/logs/" rel="alternate" type="text/html" title="Notes: Logs" /><published>2022-07-25T13:07:43+08:00</published><updated>2022-07-25T13:07:43+08:00</updated><id>http://localhost:4000/programming/logs</id><content type="html" xml:base="http://localhost:4000/programming/logs/">&lt;p&gt;source: &lt;a href=&quot;https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying&quot;&gt;Jay Kreps’ blogpost&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A lot of the information discussed in this article is relevant to Chapter 11 of Designing Data Intensive Application. &lt;a href=&quot;https://ngozinwogwugwu.github.io/programming/ddia-stream-processing/&quot;&gt;My notes on this are here&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;whats-a-log&quot;&gt;What’s a Log?&lt;/h1&gt;

&lt;p&gt;it’s an &lt;strong&gt;append-only, totally-ordered sequence of records&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ordered by time&lt;/li&gt;
  &lt;li&gt;each entry has a unique ID. Can be used as a timestamp. Allows you to &lt;strong&gt;decouple from a physical clock&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;aka write-ahead logs, commit logs, transaction logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The point of a log is to record what happened and when&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;extremely important for distributed data systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;it’s important for machines to play back their history at their own rate in a deterministic manner&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;logs-in-databases&quot;&gt;Logs in databases&lt;/h3&gt;

&lt;p&gt;Databases use logs to sync their data structures and indexes. Logs are only used internally by the database&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;write-ahead log (notes from DDIA &lt;a href=&quot;https://ngozinwogwugwu.github.io/programming/ddia-storage-and-retrieval/#:~:text=A%20Write%2DAhead%20Log%20(WAL%2C%20redo%20log)%3A%20is%20an%20additional%20append%2Donly%20file%20on%20disk&quot;&gt;here&lt;/a&gt;) helps the DB recover after a crash&lt;/li&gt;
  &lt;li&gt;Now it’s used as a way to replicate data between databases (notes from DDIA &lt;a href=&quot;https://ngozinwogwugwu.github.io/programming/ddia-replication/#:~:text=Write%2DAhead%20Log%20Shipping%3A%20Use%20the%20append%2Donly%20log%20file%20that%20describes%20the%20database%20writes%20(either%20log%20segments%20or%20WAL)&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;logs-in-distributed-systems&quot;&gt;Logs in distributed systems&lt;/h3&gt;

&lt;p&gt;For distributed systems, the order of inputs is extremely important&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Logs help these systems agree on an ordering of events&lt;/li&gt;
  &lt;li&gt;an event’s log ID becomes a universal timestamp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;State Machine Replication Principle&lt;/strong&gt; - identical deterministic processes that get the same inputs in the same order will have the same output&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;physical vs logical logging&lt;/strong&gt; - relevant for DB people&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;physical: logging the contents of each row that was changed&lt;/li&gt;
  &lt;li&gt;logical: log the SQL commands&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;state machine model&lt;/strong&gt; each machine processes data based directly on the log&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;primary-backup model&lt;/strong&gt; elect a leader to process the log. It pushes changes to followers&lt;/p&gt;

&lt;p&gt;A distributed log can be seen as the data structure which models the problem of consensus&lt;/p&gt;

&lt;h3 id=&quot;changelog-101-tables-and-events-are-dual&quot;&gt;Changelog 101: Tables and Events are Dual&lt;/h3&gt;

&lt;p&gt;logs are like list of transactions. A table just shows the current account balance&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if you have a log, you can create a table&lt;/li&gt;
  &lt;li&gt;If you have a &lt;strong&gt;changelog&lt;/strong&gt; (changes to a table), you can create a log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Version control is also like this&lt;/p&gt;

&lt;h1 id=&quot;data-integration&quot;&gt;Data Integration&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;data integration&lt;/strong&gt; making sure your services have access to the data they need&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;aka &lt;strong&gt;ETL&lt;/strong&gt;, which is usually limited to data integration in relational data warehouses&lt;/li&gt;
  &lt;li&gt;this is a &lt;strong&gt;mundane but essential&lt;/strong&gt; problem for organizations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not only does this data need to be available, but it &lt;strong&gt;needs to be readable&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;complications-to-data-integration&quot;&gt;Complications to data integration&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;There’s a lot of event data - way more than what we can store in a database&lt;/li&gt;
  &lt;li&gt;there are a lot of specialized systems (for search, batch processing, …)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;log-structured-data-flow&quot;&gt;Log-structured data flow&lt;/h3&gt;

&lt;p&gt;Disadvantages of depending on data warehouses&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;processing isn’t reversable, specific to one problem&lt;/li&gt;
  &lt;li&gt;if data isn’t entered correctly right away, the data warehouse has bad data&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;solution: all your organizations data goes into a central log (each logical data source is marked as its own log). Advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You have a buffer for async data consumption&lt;/li&gt;
  &lt;li&gt;destination systems don’t know anything about the data’s origin&lt;/li&gt;
  &lt;li&gt;all your systems potentially have access to all of the data&lt;/li&gt;
  &lt;li&gt;introducing a new system is straightforward&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is slightly different from a &lt;strong&gt;messaging system&lt;/strong&gt; or &lt;strong&gt;pub sub&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;databus&lt;/strong&gt; infrastructure that provides log caching abstraction&lt;/p&gt;

&lt;p&gt;technologies that do this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Kafka&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Kinesis&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;relationship-to-etl-and-the-data-warehouse&quot;&gt;Relationship to ETL and the Data Warehouse&lt;/h3&gt;

&lt;p&gt;A data warehouse is (supposed to be) a repository of &lt;strong&gt;clean, integrated data&lt;/strong&gt; to support analysis&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this is great for batch jobs&lt;/li&gt;
  &lt;li&gt;sometimes we need clean integrated data for things other than batch jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During ETL, the data is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;clean up&lt;/li&gt;
  &lt;li&gt;structured for the data warehouse&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;One problem of the data warehouse is organizational: The data warehouse team is the only party responsible for getting data cleaned up and into the warehouse&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;there’s no incentive for other teams to make this easy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alternative: if a log is acting as a central pipeline, and it has a &lt;strong&gt;well defined API for adding data&lt;/strong&gt;, the responsibility for providing data in a readable format falls to individual teams&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this way, the data warehouse team focuses on the problem of loading the (already structured) data into the warehouse&lt;/li&gt;
  &lt;li&gt;teams clean their data before they put it on the pipeline. This cleanup should be lossless and reversible&lt;/li&gt;
  &lt;li&gt;you can enrich data asynchronously&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Advantage to this: it becomes easy to add data systems besides warehouses&lt;/p&gt;

&lt;p&gt;This architecture enables &lt;strong&gt;decoupled, event driven systems&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;building-a-scalable-log&quot;&gt;Building a Scalable Log&lt;/h3&gt;

&lt;p&gt;LinkedIn handles tens of billions of logs every day. How do the do it?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;partition the log
    &lt;ul&gt;
      &lt;li&gt;Each partition is a totally ordered log, but there’s &lt;strong&gt;no global ordering&lt;/strong&gt; between partitions&lt;/li&gt;
      &lt;li&gt;this allows systems to append to logs without coordinating&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;batch reads and writes
    &lt;ul&gt;
      &lt;li&gt;Kafka does this aggressively&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;de-dup
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;zero-copy data transfer&lt;/strong&gt;, in Kafka&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;real-time-data-processing&quot;&gt;Real Time Data Processing&lt;/h1&gt;

&lt;p&gt;we can view stream processing as infrastructure for continuous data processing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this depends on how we collect the data. Is it collected continuously or as a batch?&lt;/li&gt;
  &lt;li&gt;most real-world use cases are continuous&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-flow-graphs&quot;&gt;Data flow graphs&lt;/h3&gt;

&lt;p&gt;stream processing lets us create feeds computed from other feeds&lt;/p&gt;

&lt;p&gt;Advantages for using a log for stream processing: each dataset is &lt;strong&gt;multi-subscriber&lt;/strong&gt; and &lt;strong&gt;ordered&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;stateful-real-time-processing&quot;&gt;Stateful Real-Time Processing&lt;/h3&gt;

&lt;p&gt;We need to maintain state in the processor to handle sophisticated counts, aggregations and joins. &lt;strong&gt;How do we maintain this state?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DDIA addresses this a little bit (&lt;a href=&quot;https://ngozinwogwugwu.github.io/programming/ddia-stream-processing/#:~:text=together%20in%20time-,Stream%20Joins,-Joining%20data%20on&quot;&gt;notes&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We could keep state in memory, but this can be fragile. We could also keep the state in a remote machine, but many round-trip calls would be expensive&lt;/p&gt;

&lt;p&gt;Alternative: The processor can &lt;strong&gt;journal out a changelog&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it can just restore its index from the changelog after a crash&lt;/li&gt;
  &lt;li&gt;advantage: other processes can subscribe to this&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;log-compaction&quot;&gt;Log compaction&lt;/h3&gt;

&lt;p&gt;we have a finite amount of space for logs&lt;/p&gt;

&lt;p&gt;for &lt;strong&gt;event data&lt;/strong&gt;, Kafka supports retaining a window of data&lt;/p&gt;

&lt;p&gt;for &lt;strong&gt;key data&lt;/strong&gt;, we can remove obsolete records (any record with a more recent update)&lt;/p&gt;

&lt;h1 id=&quot;distributed-system-design&quot;&gt;Distributed system Design&lt;/h1&gt;

&lt;p&gt;in a system with a shared log, individual systems can rely on the shared log&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;it allows them to reduce complexity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The log captures state changes, the &lt;strong&gt;serving nodes&lt;/strong&gt; just need to store the right index, and subscribe to the log&lt;/p&gt;

&lt;p&gt;this separation makes it easy to restore failed nodes or move partitions&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;use a combination of &lt;strong&gt;snapshots&lt;/strong&gt; and a fixed window of data&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">source: Jay Kreps’ blogpost</summary></entry><entry><title type="html">Notes: A Lure</title><link href="http://localhost:4000/notes/a-lure/" rel="alternate" type="text/html" title="Notes: A Lure" /><published>2022-07-22T13:07:43+08:00</published><updated>2022-07-22T13:07:43+08:00</updated><id>http://localhost:4000/notes/entangled-life-a-lure</id><content type="html" xml:base="http://localhost:4000/notes/a-lure/">&lt;p&gt;source: &lt;a href=&quot;https://www.merlinsheldrake.com/entangled-life&quot;&gt;Entangled Life&lt;/a&gt; (chapter 1) by Merlin Sheldrake&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;fungal hyphae&lt;/strong&gt; become a &lt;strong&gt;mycelial network&lt;/strong&gt; using two key moves:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;branching&lt;/li&gt;
  &lt;li&gt;fusing - must find other hyphae by &lt;strong&gt;homing&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hyphae need to know what they’re fusing with&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;some fungi have tens of thousands of &lt;strong&gt;mating types&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;sometimes hyphae fuse with their own mycelial network, but “self” here is not a binary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“Many fungi produce plant and animal hormones to alter the physiology of their associates”&lt;/p&gt;

&lt;h3 id=&quot;predatory-fungi&quot;&gt;Predatory fungi&lt;/h3&gt;

&lt;p&gt;Some fungi eat &lt;strong&gt;nematode worms&lt;/strong&gt;. They’ll only do this if:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;there’s not enough plant material to decompose&lt;/li&gt;
  &lt;li&gt;the fungus senses a worm close by&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fungus produces worm-hunting organs, which &lt;strong&gt;issue a chemical summons&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some fungal tools:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;adhesive nets&lt;/li&gt;
  &lt;li&gt;hyphal nooses - inflate when touched&lt;/li&gt;
  &lt;li&gt;toxic hyphal stalks&lt;/li&gt;
  &lt;li&gt;spores that find the worm&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;smells&quot;&gt;Smells&lt;/h3&gt;

&lt;p&gt;Human smell: we can distinguish between a trillion odors&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;plants, fungi and animals use similar receptors for detecting chemicals&lt;/li&gt;
  &lt;li&gt;fungi don’t have noses - they use their whole bodies as one big nose&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;olfactory flashbacks&lt;/strong&gt; often include visual and emotional memories&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“Male orchid bees collect scents from the world and amass them into a cocktail that they use to court females”&lt;/p&gt;

&lt;h3 id=&quot;truffles&quot;&gt;truffles&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Piedmont white truffles&lt;/strong&gt; have never been domesticated&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;exist as mycelial networks for most of the year&lt;/li&gt;
  &lt;li&gt;the truffles produce spores&lt;/li&gt;
  &lt;li&gt;Use smell to attract animals&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Truffles must partner with trees, and the partner tree must consent&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;some fungi will cause disease, while other relationships are symbiotic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Truffle mycelium sense their surroundings and responds unpredictably
&lt;strong&gt;diversity dogs&lt;/strong&gt; are trained to find new types of truffles
Truffles may provide an incentive for people to leave forests alone&lt;/p&gt;</content><author><name></name></author><summary type="html">source: Entangled Life (chapter 1) by Merlin Sheldrake</summary></entry><entry><title type="html">Notes: Crisis Mindsets</title><link href="http://localhost:4000/notes/crisis-mindsets/" rel="alternate" type="text/html" title="Notes: Crisis Mindsets" /><published>2022-07-22T13:07:43+08:00</published><updated>2022-07-22T13:07:43+08:00</updated><id>http://localhost:4000/notes/crisis-mindsets-notes</id><content type="html" xml:base="http://localhost:4000/notes/crisis-mindsets/">&lt;p&gt;source: &lt;a href=&quot;https://www.ribbonfarm.com/2022/05/18/crisis-mindset&quot;&gt;RIBBONFARM&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;It’s important to cultivate an effective crisis mindset&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;in order to do this, you must retain a strong connection to the sublime&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;solving-problems-as-a-group&quot;&gt;solving problems as a group&lt;/h3&gt;

&lt;p&gt;people deal with crises in groups, not individually&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;mix of strengths, more bandwidth&lt;/li&gt;
  &lt;li&gt;who you are fighting alongside is also who you’re fighting for&lt;/li&gt;
  &lt;li&gt;example: Robinson Crusoe had the survival skills, but almost gave up before he met Friday&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finding the right group is important&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the wrong configuration of people will demotivate you&lt;/li&gt;
  &lt;li&gt;the right group will illustrate to you what’s at stake&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because crises bind people so well, they can be rich with significance and meaning&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the most extreme version of this can make regular life seem dull by comparison&lt;/li&gt;
  &lt;li&gt;some people arrange their lives so that they’re constantly facing a crisis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moments of connection during a crisis are more intense&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the bigger the crisis, the rarer the surpluses. The rarer the surpluses, the more they matter&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;times-of-crisis-vs-flourishing&quot;&gt;times of crisis vs flourishing&lt;/h3&gt;

&lt;p&gt;If you grow up during crisis, you’ll have a mindset that’s rooted in scarcity and short time horizons&lt;/p&gt;

&lt;p&gt;by contrast, when you have a &lt;strong&gt;flourishing mindset&lt;/strong&gt;, you’re focused on personal fulfillment and accomplishment&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you spend your whole life in this mindset, you can only handle small crises. You’ll be overwhelmed by a medium sized crisis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Your ability to deal with crises changes when you age&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;you have more experience, resources and emotional regulation&lt;/li&gt;
  &lt;li&gt;you have less physical energy, health, imagination&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ngozis-thoughts-on-this&quot;&gt;Ngozi’s thoughts on this&lt;/h3&gt;

&lt;p&gt;Clearly, it’s important to experience both times of crisis and times of flourishing in order to grow into a well rounded person. I don’t think it’s realistic to contrive a crisis, but perhaps we can find a way to cultivate our crisis mindsets anyway. How can we do this?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Make a point of attempting to solve problems that are slightly out of our comfort zone&lt;/li&gt;
  &lt;li&gt;If someone in our community needs help, we can view it as an opportunity. By helping a friend or neighbor through a crisis, we increase our ability to handle a crisis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we do need to face a crisis in our life, how can we tackle it in a way that helps us grow?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reach out to friends and family. Not only can they help you face the crisis, but the experience may deepen your bonds and enrich your relationships&lt;/li&gt;
  &lt;li&gt;Reflect after it’s over. You probably grew in a way that you didn’t notice, or you may have accomplished something you didn’t know was possible. You can face the next crisis with more confidence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How do we take full advantage of a flourishing mindset?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t arrange your life so that you never encounter hardship, but stay organized enough to avoid unnecessary chaos. For example, if you have to tear your apartment apart before leaving on a trip because you forgot where you put your passport, you’ve lost time that you could be spending researching your destination&lt;/li&gt;
  &lt;li&gt;Don’t take flourishing time for granted. Learn to play guitar instead of binging Netflix&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">source: RIBBONFARM</summary></entry><entry><title type="html">Recommend Me a Book</title><link href="http://localhost:4000/bookshelf/recommend-me/" rel="alternate" type="text/html" title="Recommend Me a Book" /><published>2022-07-21T00:00:00+08:00</published><updated>2022-07-21T00:00:00+08:00</updated><id>http://localhost:4000/bookshelf/recommend-me-a-book</id><content type="html" xml:base="http://localhost:4000/bookshelf/recommend-me/">&lt;html&gt;
    &lt;head&gt;
        &lt;script&gt;
            function myFunction() {
                let bookName = document.getElementById(&quot;book-name&quot;).value
                let email = document.getElementById(&quot;your-email&quot;).value
                document.getElementById(&quot;demo&quot;).innerHTML = &quot;thanks for suggesting &quot; + bookName + &quot; :)&quot;;
                document.getElementById(&quot;entire-form&quot;).remove();
                let http = new XMLHttpRequest();
                http.open(
                    'POST',
                    'https://witch-game-zn7nb.ondigitalocean.app/witch/send_ngozi_a_book_rec',
                    true
                );
                http.setRequestHeader('Content-type', 'application/json');
                let thing = {
                    &quot;email&quot;: email,
                    &quot;book&quot;: bookName
                }
                http.send(JSON.stringify(thing));
            }
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;p id=&quot;demo&quot;&gt;Recommend a book (or article)&lt;/p&gt;
    &lt;div id=&quot;entire-form&quot;&gt;
        Book/Article: &lt;input type=&quot;text&quot; id=&quot;book-name&quot; /&gt;&lt;br /&gt;
        Your Email: &lt;input type=&quot;text&quot; id=&quot;your-email&quot; /&gt;&lt;br /&gt;
        &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot;&gt;Suggest!&lt;/button&gt;&lt;br /&gt;
    &lt;/div&gt;
&lt;/html&gt;</content><author><name></name></author><summary type="html">Recommend a book (or article) Book/Article: Your Email: Suggest!</summary></entry><entry><title type="html">Notes: Stream Processing</title><link href="http://localhost:4000/programming/ddia-stream-processing/" rel="alternate" type="text/html" title="Notes: Stream Processing" /><published>2022-07-07T04:07:43+08:00</published><updated>2022-07-07T04:07:43+08:00</updated><id>http://localhost:4000/programming/DDIA-Stream-Processing</id><content type="html" xml:base="http://localhost:4000/programming/ddia-stream-processing/">&lt;p&gt;source: &lt;a href=&quot;https://www.oreilly.com/library/view/designing-data-intensive-applications/9781491903063/&quot;&gt;Designing Data Intensive Applications&lt;/a&gt; by Martin Kleppmann (Chapter 11)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A lot of data is unbounded - it arrives gradually over time. Processing unbounded data in batches might not make sense in every situation&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stream Processing&lt;/strong&gt; - run processing continuously. Alternative to batch processing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;event streams&lt;/strong&gt; - data made incrementally available over time&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;transmitting-event-streams&quot;&gt;Transmitting Event Streams&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;event&lt;/strong&gt; - small, self-contained immutable object. Contains the details for something that happened at some point in time&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;can be encoded&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;producer (publisher)&lt;/strong&gt; generates events&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;consumers (subscribers)&lt;/strong&gt; process events&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;topic&lt;/strong&gt; &lt;strong&gt;(stream)&lt;/strong&gt; a group of related events&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;messaging-systems&quot;&gt;Messaging Systems&lt;/h2&gt;
&lt;p&gt;In a &lt;strong&gt;messaging system&lt;/strong&gt;, producers send events to consumers. In a &lt;strong&gt;publish/subscribe model&lt;/strong&gt;, we can have multiple producers and consumers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one or more &lt;strong&gt;producers&lt;/strong&gt; sends a message with an event to a &lt;strong&gt;topic&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;the message gets pushed to one or more consumers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Solutions to cases where consumers aren’t fast enough to process all of the messages:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;drop messages&lt;/li&gt;
  &lt;li&gt;buffer messages in a queue&lt;/li&gt;
  &lt;li&gt;apply &lt;strong&gt;backpressure&lt;/strong&gt; (blocking producer from sending messages)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;direct-messaging-from-producers-to-consumers&quot;&gt;Direct messaging from producers to consumers&lt;/h3&gt;
&lt;p&gt;possibility of message loss, and there’s no recovering data if a consumer goes offline. Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;UDP multicast (finance)&lt;/li&gt;
  &lt;li&gt;brokerless messaging libraries (ZeroMQ)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;message-brokers&quot;&gt;Message brokers&lt;/h3&gt;
&lt;p&gt;a database - optimized for handling event streams&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;better fault tolerance&lt;/li&gt;
  &lt;li&gt;consumers are async&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;message-brokers-compared-to-databases&quot;&gt;Message brokers compared to databases&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;message brokers automatically delete messages once they get consumed&lt;/li&gt;
  &lt;li&gt;topics are analogous to DB indexes&lt;/li&gt;
  &lt;li&gt;message brokers don’t support arbitrary queries&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;multiple-consumers&quot;&gt;Multiple consumers&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;load balancing&lt;/strong&gt; - each message gets delivered to one consumer. Allows for parallel processing&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fan out&lt;/strong&gt; - each message is delivered to all consumers. Allows different consumers to process the same data in different ways&lt;/p&gt;

&lt;h3 id=&quot;acknowledgement-and-redelivery&quot;&gt;Acknowledgement and redelivery&lt;/h3&gt;
&lt;p&gt;a broker will only delete a message from its queue if it gets an ack from the consumer. If the consumer consumes the message, then breaks before it can send the ack, the broker will send the message to another consumer&lt;/p&gt;

&lt;p&gt;This can lead to messages being processed out of order. One way to avoid this issue is to route all related messages to a single consumer&lt;/p&gt;

&lt;h2 id=&quot;partitioned-logs&quot;&gt;Partitioned Logs&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;log-based message brokers&lt;/strong&gt; are a hybrid of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;databases (durable storage) - this means that messages don’t get deleted when consumers process them&lt;/li&gt;
  &lt;li&gt;messaging - means low-latency notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-logs-for-message-storage&quot;&gt;Using logs for message storage&lt;/h3&gt;
&lt;p&gt;A log is an &lt;strong&gt;append-only sequence of records&lt;/strong&gt; on disk&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;we can use this for message brokers&lt;/li&gt;
  &lt;li&gt;these logs can be partitioned&lt;/li&gt;
  &lt;li&gt;each partition has an &lt;strong&gt;offset&lt;/strong&gt; for every message. These are ordered within a partition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;products: Kafka, Amazon Kenesis, DistributedLog&lt;/p&gt;

&lt;h3 id=&quot;logs-compared-to-traditional-messaging&quot;&gt;Logs compared to traditional messaging&lt;/h3&gt;
&lt;p&gt;No need for fan-out messaging, since each consumer can read the log independently&lt;/p&gt;

&lt;p&gt;A consumer consumes &lt;em&gt;all&lt;/em&gt; the logs for a specific topic. Downsides:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;max num nodes for a topic is the number of the topic’s log partition&lt;/li&gt;
  &lt;li&gt;slow messages can cause lags for all the subsequent messages&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;consumer-offsets&quot;&gt;Consumer Offsets&lt;/h3&gt;
&lt;p&gt;Consumers pay attention to message offsets as they work through a log&lt;/p&gt;

&lt;h3 id=&quot;disk-space-usage&quot;&gt;Disk space usage&lt;/h3&gt;
&lt;p&gt;We don’t have infinite disk space. One way to deal with this is to delete expired data as the log gets too big&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;circular buffer&lt;/strong&gt; - bounded-size buffer that deletes old messages when it gets full&lt;/p&gt;

&lt;h3 id=&quot;when-consumers-cant-keep-up-with-producers&quot;&gt;When consumers can’t keep up with producers&lt;/h3&gt;
&lt;p&gt;options: drop messages, buffer, apply backpressure&lt;/p&gt;

&lt;p&gt;it’s normal to monitor consumers to make sure they don’t get too far behind&lt;/p&gt;

&lt;p&gt;one advantage to partitioned logs: if one consumer falls behind, it doesn’t affect the others in any way&lt;/p&gt;

&lt;h3 id=&quot;replaying-old-messages&quot;&gt;Replaying old messages&lt;/h3&gt;
&lt;p&gt;If you want to replay old messages, just reset the consumer offset. The message broker doesn’t know anything about the offset, so it won’t affect anything else&lt;/p&gt;

&lt;h1 id=&quot;databases-and-streams&quot;&gt;Databases and Streams&lt;/h1&gt;
&lt;p&gt;there’s a fundamental connection between databases and streams&lt;/p&gt;

&lt;h2 id=&quot;keeping-systems-in-sync&quot;&gt;Keeping Systems in Sync&lt;/h2&gt;
&lt;p&gt;related (or replicated) data in different locations needs to be kept in sync. Some possible solutions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;dual writes&lt;/strong&gt; write to both systems at once - we get problems if one fails while the other succeeds&lt;/li&gt;
  &lt;li&gt;periodic database dumps - downside is that there’s high latency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;change-data-capture-cdc&quot;&gt;Change Data Capture (CDC)&lt;/h2&gt;
&lt;p&gt;the process of observing all data changes written to a database and extracting those changes in a form that is readable to other systems&lt;/p&gt;

&lt;h3 id=&quot;implementing-change-data-capture&quot;&gt;Implementing change data capture&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;derived data systems&lt;/strong&gt; log consumers for CDC&lt;/p&gt;

&lt;p&gt;you can use DB triggers to implement CDC, but this is fragile&lt;/p&gt;

&lt;p&gt;CDC is usually async, so you have to keep in mind that there might be lag&lt;/p&gt;

&lt;h3 id=&quot;initial-snapshot&quot;&gt;Initial snapshot&lt;/h3&gt;
&lt;p&gt;a DB snapshot should correspond to a known position in the change log&lt;/p&gt;

&lt;h3 id=&quot;log-compaction&quot;&gt;Log compaction&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;throw away duplicate logs to free up space&lt;/li&gt;
  &lt;li&gt;if a key is frequently overwritten, garbage-collect old values&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;event-sourcing&quot;&gt;Event Sourcing&lt;/h2&gt;
&lt;p&gt;technique: store all the changes to the application state as a log of events&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;developed by the domain-driven design community&lt;/li&gt;
  &lt;li&gt;application logic is built on immutable events written to a log (append only)&lt;/li&gt;
  &lt;li&gt;Deriving current state from the event log&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Applications that use event sources should be able to take a stream of events and turn it into an application state&lt;/p&gt;

&lt;p&gt;Log compaction isn’t possible with event sourcing (as opposed to CDC) because events are modeled on a higher level&lt;/p&gt;

&lt;h3 id=&quot;commands-and-events&quot;&gt;Commands and events&lt;/h3&gt;
&lt;p&gt;a &lt;strong&gt;command&lt;/strong&gt; is a request when it first arrives. Once that requests gets saved, it’s considered an &lt;strong&gt;event&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;once a command becomes an event, it’s in the app’s history&lt;/li&gt;
  &lt;li&gt;command validation should happen asynchronously&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;state-streams-and-immutability&quot;&gt;State, Streams and Immutability&lt;/h2&gt;
&lt;p&gt;a math-y way of thinking about this is that&lt;/p&gt;

&lt;p&gt;$state(now) = \int_{t=0}^{now}stream(t)dt$&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;$stream(t) = {d state(t)}/dt$&lt;/p&gt;

&lt;h3 id=&quot;advantages-of-immutable-events&quot;&gt;advantages of immutable events&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;auditability - data is never deleted&lt;/li&gt;
  &lt;li&gt;more information - you have an app’s entire history&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deriving-several-views-from-the-same-event-log&quot;&gt;Deriving several views from the same event log&lt;/h3&gt;
&lt;p&gt;You can use the same data for different features&lt;/p&gt;

&lt;p&gt;one advantage of keeping the event log around is that you can use it if you want to develop a new feature. The new feature has the entire history of the app’s events, so it’s up to date immediately&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Command Query Responsibility Segregation&lt;/strong&gt; - you get flexibility by separating write data from read data&lt;/p&gt;

&lt;h3 id=&quot;concurrency-control&quot;&gt;Concurrency control&lt;/h3&gt;
&lt;p&gt;event sourcing means async processes, which mean lag&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if this is a problem, you might want to wrap log writes and reads in a transaction&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;limitations-of-immutability&quot;&gt;Limitations of immutability&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;you run out of space&lt;/li&gt;
  &lt;li&gt;you might &lt;em&gt;want&lt;/em&gt; to delete some logs - it’s hard when the information is scattered all over the place&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;processing-streams&quot;&gt;Processing Streams&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;operator (job)&lt;/strong&gt; piece of code that processes streams. It has three options for processing streams:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Save to DB&lt;/li&gt;
  &lt;li&gt;Push the events to a user&lt;/li&gt;
  &lt;li&gt;Process stream to make an output stream
    &lt;ul&gt;
      &lt;li&gt;option to combine it with other data sources, including other streams&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Stream processors can be run in parallel on partitioned streams. This is similar to MapReduce dataflow engines - transforming and filtering records works the same&lt;/p&gt;

&lt;p&gt;Stream processing never ends, so some things don’t make sense to do in stream processing (like sorting)&lt;/p&gt;

&lt;h2 id=&quot;uses-of-stream-processing&quot;&gt;Uses of Stream Processing&lt;/h2&gt;
&lt;p&gt;used to just be monitoring, but we have more use cases now&lt;/p&gt;

&lt;h3 id=&quot;complex-event-processing&quot;&gt;complex event processing&lt;/h3&gt;
&lt;p&gt;use a query language to describe a pattern of events to look for. When the processor sees a sequence of events that match, it emits a &lt;strong&gt;complex event&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;stream-analytics&quot;&gt;stream analytics&lt;/h3&gt;
&lt;p&gt;aggregations and statistical metrics over a large number of events&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;usually computed over fixed time intervals (&lt;strong&gt;windows&lt;/strong&gt;)
    &lt;h3 id=&quot;maintaining-materialized-views&quot;&gt;Maintaining materialized views&lt;/h3&gt;
    &lt;p&gt;&lt;strong&gt;materialized view&lt;/strong&gt; - an alternate view of a dataset&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;can be queried more efficiently&lt;/li&gt;
  &lt;li&gt;updates when the underlying data changes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You need all events to make a materialized view&lt;/p&gt;

&lt;h3 id=&quot;search-of-streams&quot;&gt;Search of streams&lt;/h3&gt;
&lt;p&gt;When you search a stream (for something like string matching), you have to store it first&lt;/p&gt;

&lt;h2 id=&quot;reasoning-about-time&quot;&gt;Reasoning about time&lt;/h2&gt;
&lt;p&gt;this is hard, but most frameworks use the clock on the processing machine (&lt;strong&gt;processing time&lt;/strong&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you run into problems if there’s a lot of lag
    &lt;h3 id=&quot;event-time-vs-processing-time&quot;&gt;Event time vs processing time&lt;/h3&gt;
    &lt;p&gt;it’s important to model these as distinct, especially in situations where there’s some lag&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;knowing-when-youre-ready&quot;&gt;Knowing when you’re ready&lt;/h3&gt;
&lt;p&gt;You can’t be sure when all events for a particular window have been delivered&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;unless all the publishers publish events that say “no more events for this time window”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ways to handle stragglers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ignore them&lt;/li&gt;
  &lt;li&gt;publish a correction&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;which-clock-do-you-use&quot;&gt;Which clock do you use&lt;/h3&gt;
&lt;p&gt;three possible timestamps:
    1. time the event happened
    2. time the event was sent
    3. time the event was received by the server&lt;/p&gt;

&lt;h3 id=&quot;types-of-windows&quot;&gt;Types of windows&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;tumbling window&lt;/strong&gt; - fixed length, every event belongs to exactly one window&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;hopping window&lt;/strong&gt; - fixed length, allows for windows to overlap a little&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;sliding window&lt;/strong&gt; - fixed length, contains events that happen within some interval of each other&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;session window&lt;/strong&gt; - no fixed duration, just group all the events that  happened close together in time&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stream-joins&quot;&gt;Stream Joins&lt;/h2&gt;
&lt;p&gt;Joining data on a stream is challenging because new events can appear any time&lt;/p&gt;

&lt;h3 id=&quot;stream-stream-join-window-join&quot;&gt;Stream-stream join (window join)&lt;/h3&gt;
&lt;p&gt;challenge: the two events might happen far apart from each other&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you’ll have to save the first event in memory. You have to save &lt;strong&gt;state&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stream-table-join-stream-enrichment&quot;&gt;Stream-table join (stream enrichment)&lt;/h3&gt;
&lt;p&gt;for each event, query the DB&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;helps, because you can query old data&lt;/li&gt;
  &lt;li&gt;to reduce roundtrip time, it might help to keep a copy of the DB on the processor&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;table-table-join-materialized-view-maintenance&quot;&gt;Table-table join (materialized view maintenance)&lt;/h3&gt;
&lt;p&gt;Keep a cache of events, if they’re too expensive to push to the DB immediately&lt;/p&gt;

&lt;h3 id=&quot;time-dependence-of-joins&quot;&gt;Time-dependence of joins&lt;/h3&gt;
&lt;p&gt;The order of events is important, if they depend on each other&lt;/p&gt;

&lt;h2 id=&quot;fault-tolerance&quot;&gt;Fault Tolerance&lt;/h2&gt;
&lt;p&gt;with streams, you can’t wait for the processing to end before you make the results visible (because it’s infinite)&lt;/p&gt;

&lt;h3 id=&quot;microbatching-and-checkpointing&quot;&gt;Microbatching and checkpointing&lt;/h3&gt;
&lt;p&gt;Just make a batch out of one second of data and process it right away. Save the data&lt;/p&gt;

&lt;p&gt;If your stream operator crashes, it can just start from the most recent saved data&lt;/p&gt;

&lt;h3 id=&quot;atomic-commits&quot;&gt;Atomic commits&lt;/h3&gt;
&lt;p&gt;Wrap processing and side effects in a transaction. We don’t want side effects to happen if the processing fails&lt;/p&gt;

&lt;h3 id=&quot;idempotence&quot;&gt;Idempotence&lt;/h3&gt;
&lt;p&gt;When you can perform an operation multiple times, and it has the same effect as if it was performed one time&lt;/p&gt;</content><author><name></name></author><summary type="html">source: Designing Data Intensive Applications by Martin Kleppmann (Chapter 11)</summary></entry><entry><title type="html">Notes: Operating Systems Overview</title><link href="http://localhost:4000/programming/operating-systems-overview/" rel="alternate" type="text/html" title="Notes: Operating Systems Overview" /><published>2022-07-07T04:07:43+08:00</published><updated>2022-07-07T04:07:43+08:00</updated><id>http://localhost:4000/programming/Operating-Systems-Overview</id><content type="html" xml:base="http://localhost:4000/programming/operating-systems-overview/">&lt;p&gt;source: &lt;a href=&quot;https://codex.cs.yale.edu/avi/os-book/OS10/index.html&quot;&gt;Operating System Concepts&lt;/a&gt; by Avi Silberschatz, Peter Baer Galvin, Greg Gagne (Chapter 1)&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;An &lt;strong&gt;Operating System&lt;/strong&gt; is software that manages a computer’s hardware&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;provides basis for application programs&lt;/li&gt;
  &lt;li&gt;acts as intermediary between user and hardware&lt;/li&gt;
  &lt;li&gt;allocates resources to computer programs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-operating-systems-do&quot;&gt;What Operating Systems Do&lt;/h2&gt;

&lt;p&gt;Components to a computer system:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hardware&lt;/li&gt;
  &lt;li&gt;operating system&lt;/li&gt;
  &lt;li&gt;application systems&lt;/li&gt;
  &lt;li&gt;user&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;system-view&quot;&gt;System View&lt;/h3&gt;

&lt;p&gt;from a computer’s point of view, the OS is the program most intimately involved with the hardware. It’s a &lt;strong&gt;resource allocator&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;control program&lt;/strong&gt; manages the execution of user programs&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;prevents improper use of the computer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;defining-operating-systems&quot;&gt;Defining Operating Systems&lt;/h3&gt;

&lt;p&gt;Can be defined as a combination of the kernel and system programs&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;the kernel&lt;/strong&gt;: the operating system is the one program that’s always running. This is one possible definition of an operating system&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;system programs:&lt;/strong&gt; associated with the operating system, but not part of the kernel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;middleware:&lt;/strong&gt; a set of software frameworks that provide additional services to application developers&lt;/p&gt;

&lt;h2 id=&quot;computer-system-organization&quot;&gt;Computer-System Organization&lt;/h2&gt;

&lt;h3 id=&quot;interrupts&quot;&gt;Interrupts&lt;/h3&gt;

&lt;p&gt;An interrupt is a signal from the hardware to the CPU, usually by the system bus, which causes the CPU to stop what it’s doing and transfer execution to a fixed location. These locations could be hardcoded, or stored in a table of pointers called the &lt;strong&gt;interrupt vector&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;storage-structure&quot;&gt;Storage Structure&lt;/h3&gt;

&lt;p&gt;Computers run most of their programs from main memory (or &lt;strong&gt;RAM&lt;/strong&gt;), which is volatile. You have to load the program to main memory beforehand&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DRAM:&lt;/strong&gt; Dynamic Random-Access Memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Bootstrap Program&lt;/strong&gt; - the first program to run on a computer. Uses firmware storage to store the program, since RAM is volatile&lt;/p&gt;

&lt;p&gt;We can’t store programs in main memory for two reasons&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Main memory is too small to store all our programs&lt;/li&gt;
  &lt;li&gt;Main memory is volatile&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;io-structure&quot;&gt;I/O Structure&lt;/h3&gt;

&lt;p&gt;Operating systems handle I/O&lt;/p&gt;

&lt;h2 id=&quot;computer-system-architecture&quot;&gt;Computer-System Architecture&lt;/h2&gt;

&lt;p&gt;There are single processor systems and multi processor systems&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;core&lt;/strong&gt; - the component that executes instructions&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;multiprocessor-systems&quot;&gt;Multiprocessor systems&lt;/h3&gt;

&lt;p&gt;have processors that share resources (clock, memory, etc)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Primary advantage: increased throughput&lt;/li&gt;
  &lt;li&gt;Disadvantage: One processor could sit idle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Multicore Systems&lt;/strong&gt; - have multiple cores on a single chip (for faster communication)&lt;/p&gt;

&lt;h3 id=&quot;clustered-systems&quot;&gt;Clustered Systems&lt;/h3&gt;

&lt;p&gt;composed of two more more &lt;strong&gt;nodes&lt;/strong&gt; (individual systems) that are loosely coupled&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;redundancy leads to high availability&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Parallelization&lt;/strong&gt; - a technique which divides a program into separate components so they can be run in parallel&lt;/p&gt;

&lt;h2 id=&quot;operating-system-operations&quot;&gt;Operating System Operations&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;system daemons&lt;/strong&gt; programs that are loaded into memory at boot time. Services that are provided outside of the kernel&lt;/p&gt;

&lt;h3 id=&quot;multiprogramming-and-multitasking&quot;&gt;Multiprogramming and Multitasking&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Multiprogramming&lt;/strong&gt; increases CPU utilization by keeping several processes in memory simultaneously. Gives processing time to a new program when the current program is idle&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multitasking&lt;/strong&gt; &lt;strong&gt;-&lt;/strong&gt; when the CPU switches between programs&lt;/p&gt;

&lt;h3 id=&quot;dual-mode-and-multi-mode-operation&quot;&gt;Dual-Mode and Multi-Mode Operation&lt;/h3&gt;

&lt;p&gt;Computers must distinguish between operating-system code and user-defined code. This prevents misuse of the computer.&lt;/p&gt;

&lt;p&gt;To implement this, we need two &lt;strong&gt;modes of operation&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kernel mode (AKA supervisor mode, system mode, privileged mode)&lt;/li&gt;
  &lt;li&gt;user mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;mode bit&lt;/strong&gt; - indicates the current mode, added to the hardware of the computer&lt;/p&gt;

&lt;h3 id=&quot;timer&quot;&gt;Timer&lt;/h3&gt;

&lt;p&gt;a timer can be set to interrupt the computer after a specified period&lt;/p&gt;

&lt;h2 id=&quot;resource-management&quot;&gt;Resource Management&lt;/h2&gt;

&lt;h1 id=&quot;operating-system-structures&quot;&gt;Operating-System Structures&lt;/h1&gt;</content><author><name></name></author><summary type="html">source: Operating System Concepts by Avi Silberschatz, Peter Baer Galvin, Greg Gagne (Chapter 1)</summary></entry><entry><title type="html">Notes: Kafka Producers</title><link href="http://localhost:4000/programming/kafka-producers/" rel="alternate" type="text/html" title="Notes: Kafka Producers" /><published>2022-07-03T04:07:43+08:00</published><updated>2022-07-03T04:07:43+08:00</updated><id>http://localhost:4000/programming/Kafka-Producers</id><content type="html" xml:base="http://localhost:4000/programming/kafka-producers/">&lt;p&gt;source: &lt;a href=&quot;https://www.oreilly.com/library/view/kafka-the-definitive/9781491936153//&quot;&gt;Kafka: The Definitive Guide&lt;/a&gt; by Neha Narkhede, Gwen Shapira, Todd Palino (Chapter 3)&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Producers write messages to Kafka&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you can use the built-in API or use a third party one&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;ProducerRecord -&lt;/strong&gt; A key/value pair to be sent to Kafka&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;includes (required) &lt;strong&gt;topic name&lt;/strong&gt;, an (optional) &lt;strong&gt;partition number&lt;/strong&gt;, and an (optional) &lt;strong&gt;key and value&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;producer&lt;/strong&gt; serializes the key and value objects into ByteArrays, then sends it to a &lt;strong&gt;partitioner&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it adds the record to a &lt;strong&gt;batch of records&lt;/strong&gt;. All these records will be sent to the same topic and partition&lt;/li&gt;
  &lt;li&gt;a separate thread actually sends the batches to the right Kafka brokers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;broker&lt;/strong&gt; acks when it gets the messages&lt;/p&gt;

&lt;h3 id=&quot;serializers&quot;&gt;Serializers&lt;/h3&gt;

&lt;p&gt;Kafka includes serializers for integers and byteArrays by default, but that doesn’t cover other types. It’s recommend that people use a generic serialization library (like Protobuf)&lt;/p&gt;

&lt;h3 id=&quot;partitions&quot;&gt;Partitions&lt;/h3&gt;

&lt;p&gt;Kafka uses a message’s &lt;strong&gt;keys&lt;/strong&gt; to determine which topic partition to put the message into&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if you don’t include a key, the producer will chose a partition at random (round robin)&lt;/li&gt;
  &lt;li&gt;if you do include a key, the producer hashes it and maps the hash to a partition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because the partition depends on the key:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can use this information to optimize your application&lt;/li&gt;
  &lt;li&gt;if the partition is unavailable, you’ll get an error&lt;/li&gt;
  &lt;li&gt;once you add more partitions, Kafka can’t guarantee that messages map to partitions&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">source: Kafka: The Definitive Guide by Neha Narkhede, Gwen Shapira, Todd Palino (Chapter 3)</summary></entry><entry><title type="html">Notes: Kafka Introduction</title><link href="http://localhost:4000/programming/kafka-introduction/" rel="alternate" type="text/html" title="Notes: Kafka Introduction" /><published>2022-06-03T04:07:43+08:00</published><updated>2022-06-03T04:07:43+08:00</updated><id>http://localhost:4000/programming/Kafka-Introduction</id><content type="html" xml:base="http://localhost:4000/programming/kafka-introduction/">&lt;p&gt;source: &lt;a href=&quot;https://www.oreilly.com/library/view/kafka-the-definitive/9781491936153//&quot;&gt;Kafka: The Definitive Guide&lt;/a&gt; by Neha Narkhede, Gwen Shapira, Todd Palino (Chapter 1)&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;publishsubscribe-messaging&quot;&gt;Publish/Subscribe Messaging&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;message&lt;/strong&gt; - a base unit of information. Often has a category&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;publisher&lt;/strong&gt; - sends and classifies messages, but does not direct them anywhere&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;subscriber&lt;/strong&gt; - receives certain classes of messages&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;broker&lt;/strong&gt; - central point where messages are published to&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;enter-kafka&quot;&gt;Enter Kafka&lt;/h1&gt;

&lt;p&gt;a “distributed commit log”, or a “distributed streaming platform”&lt;/p&gt;

&lt;p&gt;Designed to store data &lt;em&gt;durably&lt;/em&gt; and &lt;em&gt;in order&lt;/em&gt;. This means that it can be read deterministically&lt;/p&gt;

&lt;p&gt;Another key feature of Kafka is that the &lt;em&gt;data is distributed&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;messages-and-batches&quot;&gt;Messages and Batches&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;message&lt;/strong&gt; - unit of data within Kafka. Kafka has no knowledge about the content of the message&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;key&lt;/strong&gt; - an optional component of a message. Used to control how messages are written to partition&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;batch&lt;/strong&gt; - collection of messages being produced to the same topic and partition&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;larger batches lead to messages being handled more efficiently, but individual messages take longer to propagate&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;schemas&quot;&gt;Schemas&lt;/h2&gt;

&lt;p&gt;Optional, but recommended. Allow engineers to decouple writing and reading messages&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;human-readable schemas (JSON, XML) lack type handling and schema versions&lt;/li&gt;
  &lt;li&gt;alternatives, like &lt;strong&gt;Apache Avro&lt;/strong&gt;, have compact serialization formats, type handling and separate schemas&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;topics--partitions&quot;&gt;Topics &amp;amp; Partitions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;topics&lt;/strong&gt; - how messages in Kafka are organized. Can be broken down into partitions&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;partitions&lt;/strong&gt; - a single log that messages are appended to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;can be hosted on different servers&lt;/li&gt;
  &lt;li&gt;time ordering is guaranteed within a partition but not a topic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;stream&lt;/strong&gt; - represent data moving from the producers to consumers for a given topic&lt;/p&gt;

&lt;h2 id=&quot;producers--consumers&quot;&gt;Producers &amp;amp; Consumers&lt;/h2&gt;

&lt;p&gt;Kafka clients can be users or consumers&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kafka Connect API - advanced client API for data integration&lt;/li&gt;
  &lt;li&gt;Kafka Streams - for stream processing&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;producers&quot;&gt;producers&lt;/h3&gt;

&lt;p&gt;create new messages. Generally publish messages to specific topics and usually don’t care which partition the message goes to&lt;/p&gt;

&lt;h3 id=&quot;consumers&quot;&gt;consumers&lt;/h3&gt;

&lt;p&gt;consume messages. Can be subscribed to one or more topics, reads messages in order&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;offset&lt;/strong&gt; - metadata (a counter) given to each message within a partition&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a consumer will use this to keep track of which messages it’s already consumed&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;consumer group&lt;/strong&gt; - a set of consumers reading from a topic. Each partition is read by a single consumer&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ownership&lt;/strong&gt; - mapping of a consumer to a partition&lt;/p&gt;

&lt;h2 id=&quot;brokers--clusters&quot;&gt;Brokers &amp;amp; Clusters&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;broker&lt;/strong&gt; is a single Kafka server&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it receives messages from producers, assigns offsets to them, and commits them to disk&lt;/li&gt;
  &lt;li&gt;services fetch requests from consumers&lt;/li&gt;
  &lt;li&gt;owns a partition&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;strong&gt;cluster&lt;/strong&gt; is a group of brokers&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;controller&lt;/strong&gt; is responsible for administrative operations&lt;/p&gt;

&lt;p&gt;A broker that is the &lt;strong&gt;leader&lt;/strong&gt; of a partition is responsible for receiving messages from producers and for replicating the partition to other brokers in its cluster&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;retention&lt;/strong&gt; - durable storage of messages&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;can be for a period of time &lt;em&gt;or&lt;/em&gt; dictated by a data limit&lt;/li&gt;
  &lt;li&gt;expired messages are deleted&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multiple-clusters&quot;&gt;Multiple Clusters&lt;/h2&gt;

&lt;p&gt;You might want multiple clusters for&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;data segregation&lt;/li&gt;
  &lt;li&gt;security isolation&lt;/li&gt;
  &lt;li&gt;redundancy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Mirror Maker&lt;/strong&gt; - like a mega-kafka. Messages are consumed from one cluster and produced for another&lt;/p&gt;

&lt;h1 id=&quot;why-kafka&quot;&gt;Why Kafka?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;multiple producers and consumers&lt;/li&gt;
  &lt;li&gt;data is easy to retain&lt;/li&gt;
  &lt;li&gt;scalable and performant&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-cases-for-kafka&quot;&gt;Use Cases for Kafka&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;activity tracking&lt;/li&gt;
  &lt;li&gt;messaging&lt;/li&gt;
  &lt;li&gt;metrics &amp;amp; logging&lt;/li&gt;
  &lt;li&gt;stream processing&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;kafkas-origin&quot;&gt;Kafka’s Origin&lt;/h1&gt;

&lt;p&gt;created at LinkedIn to address a data pipeline problem&lt;/p&gt;

&lt;p&gt;released as an open source project on GitHub in 2010&lt;/p&gt;

&lt;p&gt;It’s named after Franz Kafka, but for no particular reason. Just because it sounded cool&lt;/p&gt;</content><author><name></name></author><summary type="html">source: Kafka: The Definitive Guide by Neha Narkhede, Gwen Shapira, Todd Palino (Chapter 1)</summary></entry><entry><title type="html">My Fitness RPG</title><link href="http://localhost:4000/programming/fitness-rpg/" rel="alternate" type="text/html" title="My Fitness RPG" /><published>2022-05-01T04:07:43+08:00</published><updated>2022-05-01T04:07:43+08:00</updated><id>http://localhost:4000/programming/my-fitness-rpg</id><content type="html" xml:base="http://localhost:4000/programming/fitness-rpg/">&lt;p&gt;I made a simple phone game that draws on fitness stats from your wearable. The game’s concept is quite simple: Fight monsters to gain experience points and gold, while using real-life factors to determine its behavior.&lt;/p&gt;

&lt;p&gt;Fitness stats like cardiovascular strain and sleep determine a character’s strength and health. Other real-world factors, such as current weather and moon phase, determine which monsters appear. By using mundane events in the real world to create fun game mechanics, I hope to encourage my players to view daily life with a layer of whimsey. Naturally, this would also encourage players to form better habits.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://witch-game-text-adventure-i26wf.ondigitalocean.app/&quot;&gt;I published a demo. Try it out!&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/witch_game/IMG_9150.PNG&quot; alt=&quot;IMG_9150.PNG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/witch_game/IMG_9151.PNG&quot; alt=&quot;IMG_9151.PNG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/witch_game/IMG_9152.PNG&quot; alt=&quot;IMG_9152.PNG&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;/assets/witch_game/IMG_9153.PNG&quot; alt=&quot;IMG_9153.PNG&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;how-did-i-make-this&quot;&gt;How did I make this?&lt;/h2&gt;

&lt;p&gt;The tech stack I used for this is quite straightforward. I used &lt;strong&gt;PostgreSQL&lt;/strong&gt; to store data and &lt;strong&gt;Django&lt;/strong&gt; to create the REST API. I chose &lt;strong&gt;Expo/ReactNative&lt;/strong&gt; to generate a mobile-friendly frontend as I wanted the option to publish my game as an iOS app. Lastly, I decided to use  &lt;strong&gt;DigitalOcean&lt;/strong&gt; to host the entire app because it was fairly straightforward to set up automated deployment for the frontend and the backend of my project.&lt;/p&gt;

&lt;h2 id=&quot;aspirations&quot;&gt;Aspirations&lt;/h2&gt;

&lt;p&gt;I want to pull in more real-time data, such as user location or meditation minutes. Additionally, I want to make the gameplay more complex, and use a storyline and art to make the game more compelling. I would also consider adding NFT items as a way for the game to generate profit. A player could pay to mint a weapon, for example.&lt;/p&gt;

&lt;h2 id=&quot;learnings&quot;&gt;Learnings&lt;/h2&gt;

&lt;p&gt;I view the current incarnation of this game as a proof-of-concept, and I learned quite a bit while building this version of the game. Here’s what I’ll do for my next version:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Deploy early and often&lt;/strong&gt; - I want to publish a live version of my game as early as possible so I can get feedback at every step of development.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Start with the integrations&lt;/strong&gt; - I’m moving from Whoop to Apple Health, since Apple Health has far more users and allows for developer integration.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Web is okay!&lt;/strong&gt; - Getting published on the App Store is a whole thing. I want immediate feedback on my app, so I’ll publish my game to the web before I focus on creating an iOS app&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I made a simple phone game that draws on fitness stats from your wearable. The game’s concept is quite simple: Fight monsters to gain experience points and gold, while using real-life factors to determine its behavior.</summary></entry><entry><title type="html">Notes: Writing Smart Contracts</title><link href="http://localhost:4000/programming/cryptozombies/" rel="alternate" type="text/html" title="Notes: Writing Smart Contracts" /><published>2022-01-17T04:07:43+08:00</published><updated>2022-01-17T04:07:43+08:00</updated><id>http://localhost:4000/programming/cryptozombies</id><content type="html" xml:base="http://localhost:4000/programming/cryptozombies/">&lt;p&gt;source: &lt;a href=&quot;https://cryptozombies.io/&quot;&gt;CryptoZombies&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;cryptozombies&quot;&gt;CryptoZombies&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://cryptozombies.io/en/lesson/1/chapter/1&quot;&gt;https://cryptozombies.io&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;make-a-zombie-factory&quot;&gt;make a zombie factory&lt;/h3&gt;

&lt;h3 id=&quot;goal--pragma&quot;&gt;goal &amp;amp; pragma&lt;/h3&gt;

&lt;p&gt;requirements for a zombie factory&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;database with all zombies&lt;/li&gt;
  &lt;li&gt;function to create zombies&lt;/li&gt;
  &lt;li&gt;each zombie will be unique&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;zombie dna&lt;/strong&gt; represented as an int. Different parts of the int map to different zombie traits&lt;/p&gt;

&lt;p&gt;a &lt;strong&gt;contract&lt;/strong&gt; is the fundamental building block of ethereum applications&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all variables and functions belong to a contract&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;solidarity&lt;/strong&gt; object oriented programming language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;version pragma&lt;/strong&gt; declaration of the version for the compiler&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;all solidarity code starts with this, prevents issues with future compiler versions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;example contract&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solidity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZombieFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;variables-and-math&quot;&gt;variables and math&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;state variables&lt;/strong&gt; permanently stored in contract storage. They’re written to the blockchain, similar to writing to a database&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;uint&lt;/strong&gt; unsigned int, can’t be negative&lt;/p&gt;

&lt;p&gt;math operations in solidity are pretty straightforward&lt;/p&gt;

&lt;h3 id=&quot;structs--arrays&quot;&gt;structs &amp;amp; arrays&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;structs&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;arrays&lt;/strong&gt; there are &lt;strong&gt;fixed&lt;/strong&gt; and &lt;strong&gt;dynamic&lt;/strong&gt; arrays. To make an array dynamic, don’t specify the length. You can also create arrays out of structs&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fixedArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dynamicArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;people&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;if you create a dynamic array of structs, it gets stored in the blockchain. It’s like storing structured data in a database&lt;/p&gt;

&lt;p&gt;if you declare an array as &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt;, solidity will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;getter&lt;/code&gt; method for it. Makes them readable but not writable by other contracts&lt;/p&gt;

&lt;p&gt;you can &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; structs and variables to arrays&lt;/p&gt;

&lt;h3 id=&quot;functions&quot;&gt;functions&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;functions&lt;/strong&gt; look like this&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eatHamburgers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sayHello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; specifies the visibility of the function. Functions are public by default&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; functions are only visible by other functions within the contract. Private functions start with an underscore&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;memory&lt;/code&gt; indicates that &lt;code class=&quot;highlighter-rouge&quot;&gt;_name&lt;/code&gt; should be stored in memory. This is &lt;strong&gt;required for reference types&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;types of arguments&lt;/strong&gt; - you can pass them in &lt;strong&gt;by value&lt;/strong&gt; or &lt;strong&gt;by reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;any variable that you pass around by reference (arrays, strings, structs, mappings) vs&lt;/li&gt;
  &lt;li&gt;any variable that you pass into the function. &lt;strong&gt;Changes to these variables are limited to the function&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;return values&lt;/strong&gt; - the function declaration contains the return value type&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;function modifiers&lt;/strong&gt; - a way to document the type of function you’re writing&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;view&lt;/strong&gt; - it’s viewing data from the blockchain but not modifying it&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;pure&lt;/strong&gt; - not even accessing data from the app&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-keccak256-to-create-a-random-zombie&quot;&gt;using &lt;code class=&quot;highlighter-rouge&quot;&gt;Keccak256&lt;/code&gt; to create a random zombie&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keccak256&lt;/code&gt; is a hash function that outputs a 256-bit hex number&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;input of type bytes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;to pack a string into bytes&lt;/strong&gt; use the function &lt;code class=&quot;highlighter-rouge&quot;&gt;abi.encodePacked&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;code so far&lt;/p&gt;

    &lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solidity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
  &lt;span class=&quot;k&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ZombieFactory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
      &lt;span class=&quot;c1&quot;&gt;// declare our event here
&lt;/span&gt;    
      &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnaDigits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnaModulus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnaDigits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
      &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Zombie&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
      &lt;span class=&quot;n&quot;&gt;Zombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zombies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
      &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_createZombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;zombies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Zombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_dna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// and fire it here
&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
      &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_generateRandomDna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keccak256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encodePacked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dnaModulus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
      &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createRandomZombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randDna&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_generateRandomDna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;_createZombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;randDna&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;events&quot;&gt;events&lt;/h3&gt;

&lt;p&gt;your contract can listen to &lt;strong&gt;events&lt;/strong&gt; on the blockchain and take an action&lt;/p&gt;

&lt;h3 id=&quot;the-frontend&quot;&gt;the frontend&lt;/h3&gt;

&lt;p&gt;Ethereum has a Javascript library called &lt;strong&gt;Web3.js&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;make-the-zombie-app-more-game&quot;&gt;Make the zombie app more game&lt;/h1&gt;

&lt;h3 id=&quot;addresses-and-mappings&quot;&gt;Addresses and Mappings&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;accounts&lt;/strong&gt; similar to bank accounts&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;owned by an individual or contract&lt;/li&gt;
  &lt;li&gt;holds a balance of &lt;strong&gt;ether&lt;/strong&gt;, can send or receive ether&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;addresses&lt;/strong&gt; hex identifiers for the accounts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mappings&lt;/strong&gt; key-values stores. Defined like this:&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;mapping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;msgsender&quot;&gt;msg.sender&lt;/h3&gt;

&lt;p&gt;this function returns the address of whatever (person or contract) that called the current function&lt;/p&gt;

&lt;h3 id=&quot;require&quot;&gt;require&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; makes the function throw an exception if some conditions are not met&lt;/p&gt;

&lt;h3 id=&quot;inheritance-and-import&quot;&gt;inheritance and import&lt;/h3&gt;

&lt;p&gt;the syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;contract descendentContract is ancestorContract {}&lt;/code&gt; will create an inherited contract&lt;/p&gt;

&lt;p&gt;the syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;import &quot;./another_file.sol&quot;;&lt;/code&gt; will import a file&lt;/p&gt;

&lt;h3 id=&quot;storage-and-memory&quot;&gt;storage and memory&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;storage&lt;/strong&gt; gets stored on the blockchain. This is analogous to writing to disk&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;memory&lt;/strong&gt; variables in memory are temporary, and disappear when the function ends&lt;/p&gt;

&lt;p&gt;you include these as keywords when you declare variables&lt;/p&gt;

&lt;h3 id=&quot;internal--external&quot;&gt;Internal &amp;amp; External&lt;/h3&gt;

&lt;p&gt;functions in solidity have different visibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;internal&lt;/code&gt; is the same as &lt;code class=&quot;highlighter-rouge&quot;&gt;private&lt;/code&gt;, except it includes inherited classes&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;external&lt;/code&gt; is like &lt;code class=&quot;highlighter-rouge&quot;&gt;public&lt;/code&gt; - except &lt;code class=&quot;highlighter-rouge&quot;&gt;external&lt;/code&gt; functions are &lt;strong&gt;only&lt;/strong&gt; accessible from outside the contract&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reading-from-other-contracts&quot;&gt;reading from other contracts&lt;/h3&gt;

&lt;p&gt;we need to define an &lt;strong&gt;interface&lt;/strong&gt; to interact with other contracts. Interfaces look like this:&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exampleInterface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cryptokitties&quot;&gt;cryptokitties&lt;/h3&gt;

&lt;p&gt;source code is here (&lt;a href=&quot;https://github.com/dapperlabs/cryptokitties-bounty/blob/master/contracts/KittyCore.sol#L91&quot;&gt;github&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;we initialize the contract using the address of the contract&lt;/p&gt;

&lt;h1 id=&quot;ethereum&quot;&gt;Ethereum&lt;/h1&gt;

&lt;p&gt;Ethereum contracts are &lt;strong&gt;immutable&lt;/strong&gt;. This makes security a huge concern. Because of this, it make sense to have getters and setters for some contract variables, like &lt;code class=&quot;highlighter-rouge&quot;&gt;setKittyContractAddress&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;constructors&lt;/strong&gt; - optional functions that get executed when an object gets created&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;function modieifer&lt;/strong&gt; modify other functions, usually to check some requirements before the execution (like &lt;code class=&quot;highlighter-rouge&quot;&gt;onlyOwner&lt;/code&gt;)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;uses the keyword &lt;code class=&quot;highlighter-rouge&quot;&gt;modifier&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;uses &lt;code class=&quot;highlighter-rouge&quot;&gt;_;&lt;/code&gt; - when this gets run, it jumps to the modified function&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ownable-contracts&quot;&gt;ownable contracts&lt;/h3&gt;

&lt;p&gt;In order to prevent randos from changing the contract, you make a contract &lt;code class=&quot;highlighter-rouge&quot;&gt;ownable&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OpenZeppelin&lt;/code&gt; solidity library&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;has secure smart contracts that you can use in your own dapps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It makes sense to be careful with ownable contracts. The owners can add backdoors for themselves&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;this means you should read code before you trust it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gas&quot;&gt;gas&lt;/h2&gt;

&lt;p&gt;you can buy gas with ether&lt;/p&gt;

&lt;p&gt;gas required to execute a function depends on the function’s complexity. This encourages code optimization&lt;/p&gt;

&lt;h3 id=&quot;struct-packing&quot;&gt;struct packing&lt;/h3&gt;

&lt;p&gt;Solidity reserves 256 bits for all uints (8, 16, 32…)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;exception&lt;/strong&gt;: inside of structs. You’ll want to use the smallest possible integer sub-types and cluster identically-typed fields&lt;/p&gt;

&lt;h3 id=&quot;time&quot;&gt;time&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;now&lt;/code&gt; - built in&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;days&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;months&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;minutes&lt;/code&gt; - you can say &lt;code class=&quot;highlighter-rouge&quot;&gt;now + 5 minutes&lt;/code&gt; to mean five minutes from now&lt;/p&gt;

&lt;p&gt;the &lt;strong&gt;2038 problem&lt;/strong&gt; - it will be so many seconds since 1970 that we’ll have overflows from a &lt;code class=&quot;highlighter-rouge&quot;&gt;uint32&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;default is &lt;code class=&quot;highlighter-rouge&quot;&gt;uint256&lt;/code&gt;, so we should cast dates to &lt;code class=&quot;highlighter-rouge&quot;&gt;uint32&lt;/code&gt;s&lt;/p&gt;

&lt;h3 id=&quot;passing-references-to-structs&quot;&gt;passing references to structs&lt;/h3&gt;

&lt;p&gt;You can pass a pointer to a struct in a function like this&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyStruct&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_myStruct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;function-modifiers-can-take-input-variables&quot;&gt;function modifiers can take input variables&lt;/h3&gt;

&lt;p&gt;You declare them like any other function with input variables&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;modifier&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;storage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you’d input the variables in your function definition&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DrinkAlcohol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storaage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;olderThan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gas--view-functions&quot;&gt;gas &amp;amp; view functions&lt;/h3&gt;

&lt;p&gt;If you call a view function externally, it will just find the value on your local ethereum node. &lt;strong&gt;This does not cost you gas&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;if you call a view function from &lt;em&gt;inside&lt;/em&gt; a contract, &lt;strong&gt;it will cost you gas&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gas--building-variables-on-the-fly&quot;&gt;gas &amp;amp; building variables on the fly&lt;/h3&gt;

&lt;p&gt;writing data to storage is one of the most expensive things you can do on the blockchain, so in a lot of cases it makes sense to create things on the fly&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;in order to make sure your arrays stay in memory, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;memory&lt;/code&gt; tag when you declare them&lt;/p&gt;

    &lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also for loop look like this&lt;/p&gt;

&lt;h1 id=&quot;erc271-crypto-collectibles&quot;&gt;ERC271, Crypto collectibles&lt;/h1&gt;

&lt;h2 id=&quot;tokens-on-ethereum&quot;&gt;Tokens on Ethereum&lt;/h2&gt;

&lt;p&gt;Tokens are basically contracts that follow a standard set of rules&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;implements the same functions (&lt;code class=&quot;highlighter-rouge&quot;&gt;transferFrom&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;balanceOf&lt;/code&gt;…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have a standard, we can build on top of tokens more easily. For example, and exchange can work with any kind of ERC20 token&lt;/p&gt;

&lt;p&gt;We have ERC20 tokens (similar to currencies) and ERC271 tokens (NFTs). NFTs are not interchangeable or divisible&lt;/p&gt;

&lt;h2 id=&quot;erc271-standard-multiple-inheritance&quot;&gt;ERC271 standard, multiple inheritance&lt;/h2&gt;

&lt;p&gt;If we want to make an NFT, we inherit from ERC271. This means we need to implement &lt;strong&gt;multiple inheritance&lt;/strong&gt; by using the following syntax:&lt;/p&gt;

&lt;div class=&quot;language-solidity highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ChildClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParentA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ParentB&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;transfer-logic&quot;&gt;Transfer Logic&lt;/h2&gt;

&lt;p&gt;We have two different ways to transfer NFTs here:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;transferFrom&lt;/strong&gt; - the owner transfers the NFT to the recipient&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;approve&lt;/strong&gt; and &lt;strong&gt;transferFrom&lt;/strong&gt; - the owner approves a transfer to a specific address, then the recipient calls the &lt;code class=&quot;highlighter-rouge&quot;&gt;transferFrom&lt;/code&gt; fununction&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">source: CryptoZombies</summary></entry></feed>